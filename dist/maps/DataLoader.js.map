{"version":3,"sources":["DataLoader.js","../src/DataLoader.ts"],"names":["Object","defineProperty","exports","value","react_router_config_1","require","pathToRegexp","DataLoader","routes","req","args","_useRedux","_title","_routes","_url","url","has","_query","parseQuery","query","_host","get","console","warn","res","Map","key","set","store","title","branch","matchRoutes","promises","map","route","component","configure","Promise","resolve","fetchData","urlTemplate","Function","params","keys","exec","i","length","name","all","default"],"mappings":"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","file":"../DataLoader.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_router_config_1 = require(\"react-router-config\");\nconst pathToRegexp = require(\"path-to-regexp\");\nclass DataLoader {\n    constructor(routes, req, args) {\n        this._useRedux = true;\n        this._title = \"\";\n        this._routes = routes;\n        this._url = req.url;\n        this._useRedux = !args.has(\"no-redux\");\n        this._query = this.parseQuery(req.query);\n        this._host = req.get(\"X-LOCAL-HOST\");\n        if (typeof this._host === \"undefined\" || this._host === \"\")\n            console.warn(\"Header X-LOCAL-HOST is not specified! No initial data will be loaded.\");\n    }\n    parseQuery(query) {\n        let res = new Map();\n        for (let key in query)\n            res.set(key, query[key]);\n        return res;\n    }\n    async load(store) {\n        if (typeof this._host === \"undefined\" || this._host === \"\")\n            return { store, title: this._title };\n        const branch = react_router_config_1.matchRoutes(this._routes, this._url);\n        const promises = branch.map(({ route }) => {\n            let component = route.component;\n            if (component.configure) {\n                component.configure(this._host);\n                return Promise.resolve();\n            }\n            let fetchData = component.fetchData;\n            let urlTemplate = component.urlTemplate;\n            if (component.title && this._title === \"\")\n                this._title = component.title;\n            if (!(fetchData instanceof Function) || !this._useRedux)\n                return Promise.resolve();\n            let params, keys = [], url = new Map();\n            if (urlTemplate && urlTemplate !== \"\") {\n                params = pathToRegexp(urlTemplate, keys).exec(this._url);\n                for (let i = 1; i < params.length; i++) {\n                    url.set(keys[0].name, params[i]);\n                }\n            }\n            return fetchData(store, { url, query: this._query });\n        });\n        await Promise.all(promises);\n        return { store, title: this._title };\n    }\n}\nexports.default = DataLoader;\n","import { Request } from \"express\";\r\nimport { matchRoutes } from \"react-router-config\";\r\nimport { IReactPage } from './IReactPage';\r\n\r\nconst pathToRegexp  = require(\"path-to-regexp\");\r\n\r\nexport default class DataLoader {\r\n\r\n    private _useRedux = true;\r\n    private _title = \"\";\r\n    private _routes: any;\r\n    private _url: string;\r\n    private _query: Map<string, string>;\r\n    private _host: string;\r\n\r\n    constructor(routes: any, req: Request, args: Map<string, any>) {\r\n        this._routes = routes;\r\n        this._url = req.url;\r\n        this._useRedux = !args.has(\"no-redux\");\r\n        this._query = this.parseQuery(req.query);\r\n        this._host = req.get(\"X-LOCAL-HOST\");\r\n        \r\n        if (typeof this._host === \"undefined\" || this._host === \"\")\r\n            console.warn(\"Header X-LOCAL-HOST is not specified! No initial data will be loaded.\")\r\n    }\r\n\r\n    private parseQuery(query: any) {\r\n        let res = new Map<string, string>();\r\n\r\n        for (let key in query)\r\n            res.set(key, query[key]);\r\n\r\n        return res;\r\n    }\r\n\r\n    public async load(store: any) {\r\n\r\n        if (typeof this._host === \"undefined\" || this._host === \"\")\r\n            return { store, title: this._title };\r\n\r\n        const branch = matchRoutes(this._routes, this._url);\r\n\r\n        const promises = branch.map(({ route }) => {\r\n\r\n            let component = route.component as IReactPage;\r\n\r\n            if (component.configure) {\r\n                \r\n                component.configure(this._host);\r\n                \r\n                return Promise.resolve();\r\n            }\r\n\r\n            let fetchData   = component.fetchData;\r\n            let urlTemplate = component.urlTemplate;\r\n\r\n            if (component.title && this._title === \"\")\r\n                this._title = component.title;\r\n\r\n            if (!(fetchData instanceof Function) || !this._useRedux)\r\n                return Promise.resolve();\r\n\r\n            let params, keys = [], url = new Map<string, string>();\r\n\r\n            if (urlTemplate && urlTemplate !== \"\") {\r\n                params = pathToRegexp(urlTemplate, keys).exec(this._url);\r\n\r\n                for (let i = 1; i < params.length; i++) {\r\n                    url.set(keys[0].name, params[i]);\r\n                }\r\n            }\r\n\r\n            return fetchData(store, { url, query: this._query });\r\n        });\r\n\r\n        await Promise.all(promises);\r\n\r\n        return { store, title: this._title };\r\n    }\r\n\r\n}"]}