{"version":3,"sources":["server.jsx","../src/server.tsx"],"names":["Object","defineProperty","exports","value","React","require","react_router_1","react_router_config_1","express","path","Logger_1","renderObject_1","DataLoader_1","ArgsParser_1","appData","default","routes","emptyStore","store","theme","app","args","parse","process","argv","splice","logger","join","__dirname","init","global","XMLHttpRequest","use","static","get","req","res","status","end","console","log","url","startMoment","Date","now","loader","assign","load","data","context","content","renderRoutes","renderObject","has","withMui","withJss","withRedux","withTemplate","title","render","resData","append","length","chunk","slice","write","logToFile","error","message","PORT","env","listen"],"mappings":"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","file":"server.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_router_1 = require(\"react-router\");\nconst react_router_config_1 = require(\"react-router-config\");\nconst express = require(\"express\");\nconst path = require(\"path\");\nconst Logger_1 = require(\"./Logger\");\nconst renderObject_1 = require(\"./renderObject\");\nconst DataLoader_1 = require(\"./DataLoader\");\nconst ArgsParser_1 = require(\"./ArgsParser\");\nconst appData = require('./app/js/bundle.js').default;\nconst routes = appData.routes;\nconst emptyStore = appData.store;\nconst theme = appData.theme;\nconst app = express();\nconst args = ArgsParser_1.default.parse(process.argv.splice(2));\nconst logger = new Logger_1.default(path.join(__dirname, \"log.txt\"));\nlogger.init();\nglobal.XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\nif (args[\"mode\"] === \"view\")\n    app.use(express.static(__dirname + '/public'));\napp.get(\"ping\", (req, res) => {\n    res.status(200).end();\n});\napp.get(\"*\", async (req, res) => {\n    console.log(\"Starting request \" + req.url);\n    let startMoment = Date.now();\n    try {\n        let loader = new DataLoader_1.default(routes, req, args);\n        let store = Object.assign({}, emptyStore);\n        let data = await loader.load(store);\n        let context = {};\n        let content = (<react_router_1.StaticRouter location={req.url} context={context}>\r\n                {react_router_config_1.renderRoutes(routes)}\r\n            </react_router_1.StaticRouter>);\n        let renderObject = new renderObject_1.default(content);\n        if (args.has(\"mui\"))\n            renderObject.withMui(theme);\n        else if (args.has(\"jss\"))\n            renderObject.withJss();\n        if (!args.has(\"--no-redux\"))\n            renderObject.withRedux(data.store);\n        if (args.has(\"mode\") && args.get(\"mode\") === \"view\")\n            renderObject.withTemplate(`\r\n                <!DOCTYPE html>\r\n                <html>\r\n                    <head>\r\n                        <meta charset=\"utf-8\">\r\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n                        <meta name=\"theme-color\" content=\"#000000\">\r\n                        <link rel=\"shortcut icon\" href=\"/static/favicon.ico\">\r\n                        <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/bundle.css\">\r\n                        <title>${data.title}</title>\r\n                    </head>\r\n                    <body>\r\n                        <div id=\"root\">{{insertPoint}}</div>\r\n                        <script type=\"text/javascript\" src=\"/static/js/bundle.js\" defer></script>\r\n                    </body>\r\n                </html>\r\n            `);\n        let resData = await renderObject.render();\n        res.status(context.status === 404 ? 404 : 200);\n        res.append(\"Content-Type\", \"text/html; charset=utf-8\");\n        while (resData.length > 0) {\n            var chunk = resData.slice(0, resData.length > 4096 ? 4096 : resData.length);\n            res.write(chunk);\n            resData = resData.slice(chunk.length);\n        }\n        res.end();\n    }\n    catch (e) {\n        logger.logToFile(e);\n        console.error(e);\n        res.status(500);\n        res.append(\"Content-Type\", \"text/plain; charset=utf-8\");\n        res.end(e.message);\n    }\n    finally {\n        console.log(`Request \"${req.url}\" finished in ${Date.now() - startMoment} ms`);\n    }\n});\nconst PORT = process.env.PORT || 5001;\napp.listen(PORT, () => {\n    console.log(`Server listening on: ${PORT}`);\n});\n","import * as React from 'react';\r\n\r\nimport { Request, Response, Application } from \"express\";\r\nimport { StaticRouter } from 'react-router';\r\nimport { renderRoutes } from \"react-router-config\";\r\n\r\nconst express       = require(\"express\");\r\nconst path          = require(\"path\");\r\n\r\nimport Logger from \"./Logger\";\r\nimport RenderObject from './renderObject';\r\nimport DataLoader from \"./DataLoader\";\r\nimport ArgsParser from \"./ArgsParser\";\r\n\r\nconst appData    = require('./app/js/bundle.js').default;\r\nconst routes     = appData.routes;\r\nconst emptyStore = appData.store;\r\nconst theme      = appData.theme;\r\nconst app        = express() as Application;\r\nconst args       = ArgsParser.parse(process.argv.splice(2));\r\nconst logger     = new Logger(path.join(__dirname, \"log.txt\"));\r\n\r\nlogger.init();\r\n\r\n(global as any).XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\r\n\r\nif (args[\"mode\"] === \"view\")\r\n    app.use(express.static(__dirname + '/public'));\r\n\r\napp.get(\"ping\", (req: Request, res: Response) => {\r\n    res.status(200).end();\r\n});\r\n\r\napp.get(\"*\", async (req: Request, res: Response) => {\r\n    \r\n    console.log(\"Starting request \" + req.url);\r\n    \r\n    let startMoment = Date.now();\r\n\r\n    try {\r\n\r\n        let loader = new DataLoader(routes, req, args);\r\n\r\n        let store = Object.assign({}, emptyStore);\r\n\r\n        let data = await loader.load(store);\r\n\r\n        let context = {} as any;\r\n\r\n        let content = (\r\n            <StaticRouter location={req.url} context={context}>\r\n                { renderRoutes(routes) }\r\n            </StaticRouter>\r\n        );\r\n\r\n        let renderObject = new RenderObject(content);\r\n\r\n        if (args.has(\"mui\"))\r\n            renderObject.withMui(theme)\r\n        else if (args.has(\"jss\"))\r\n            renderObject.withJss();\r\n\r\n        if (!args.has(\"--no-redux\"))\r\n            renderObject.withRedux(data.store);\r\n\r\n        if (args.has(\"mode\") && args.get(\"mode\") === \"view\")\r\n            renderObject.withTemplate(`\r\n                <!DOCTYPE html>\r\n                <html>\r\n                    <head>\r\n                        <meta charset=\"utf-8\">\r\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n                        <meta name=\"theme-color\" content=\"#000000\">\r\n                        <link rel=\"shortcut icon\" href=\"/static/favicon.ico\">\r\n                        <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/bundle.css\">\r\n                        <title>${data.title}</title>\r\n                    </head>\r\n                    <body>\r\n                        <div id=\"root\">{{insertPoint}}</div>\r\n                        <script type=\"text/javascript\" src=\"/static/js/bundle.js\" defer></script>\r\n                    </body>\r\n                </html>\r\n            `);\r\n\r\n        let resData = await renderObject.render();\r\n\r\n        res.status(context.status === 404 ? 404 : 200);\r\n\r\n        res.append(\"Content-Type\", \"text/html; charset=utf-8\");\r\n\r\n        while (resData.length > 0) {\r\n            var chunk = resData.slice(0, resData.length > 4096 ? 4096 : resData.length);\r\n            res.write(chunk);\r\n            resData = resData.slice(chunk.length);\r\n        }\r\n\r\n        res.end();\r\n    }\r\n    catch(e) {\r\n\r\n        logger.logToFile(e);\r\n        console.error(e);\r\n\r\n        res.status(500);\r\n        res.append(\"Content-Type\", \"text/plain; charset=utf-8\");\r\n        res.end(e.message);\r\n    }\r\n    finally {\r\n        console.log(`Request \"${req.url}\" finished in ${Date.now() - startMoment} ms`);\r\n    }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5001;\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server listening on: ${PORT}`);\r\n});"]}