{"version":3,"sources":["ArgsParser.js","../src/ArgsParser.ts"],"names":["Object","defineProperty","exports","value","ArgsParser","rawArgs","args","Map","i","length","startsWith","substr","includes","Error","set","default"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ICDqBC,U;;;;;;;;;0BAEGC,O,EAAiB;AACjC,UAAIC,IAAI,GAAG,IAAIC,GAAJ,EAAX;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCH,QAAAA,OAAO,CAACG,CAAD,CAAP,GAAaH,OAAO,CAACG,CAAD,CAAP,CAAWE,UAAX,CAAsB,IAAtB,IAA8BL,OAAO,CAACG,CAAD,CAAP,CAAWG,MAAX,CAAkB,CAAlB,CAA9B,GAAqDN,OAAO,CAACG,CAAD,CAAzE;;AAEA,YAAI,CAAC,MAAD,EAASI,QAAT,CAAkBP,OAAO,CAACG,CAAD,CAAzB,CAAJ,EAAmC;AAC/B,cAAIA,CAAC,IAAIH,OAAO,CAACI,MAAR,GAAiB,CAAtB,IAA2BJ,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,CAAeE,UAAf,CAA0B,IAA1B,CAA/B,EACI,MAAM,IAAIG,KAAJ,6BAA+BR,OAAO,CAACG,CAAD,CAAtC,eAAN;AAEJF,UAAAA,IAAI,CAACQ,GAAL,CAAST,OAAO,CAACG,CAAD,CAAhB,EAAqBH,OAAO,CAACG,CAAC,GAAG,CAAL,CAA5B;AACAA,UAAAA,CAAC;AACD;AACH;;AAEDF,QAAAA,IAAI,CAACQ,GAAL,CAAST,OAAO,CAACG,CAAD,CAAhB,EAAqB,IAArB;AACH;;AAED,aAAOF,IAAP;AACH;;;;;;AArBLJ,OAAA,CAAAa,OAAA,GAAAX,UAAA","file":"ArgsParser.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ArgsParser {\n    static parse(rawArgs) {\n        let args = new Map();\n        for (let i = 0; i < rawArgs.length; i++) {\n            rawArgs[i] = rawArgs[i].startsWith(\"--\") ? rawArgs[i].substr(2) : rawArgs[i];\n            if ([\"mode\"].includes(rawArgs[i])) {\n                if (i == rawArgs.length - 1 || rawArgs[i + 1].startsWith(\"--\"))\n                    throw new Error(`Missing value for ${rawArgs[i]} argument`);\n                args.set(rawArgs[i], rawArgs[i + 1]);\n                i++;\n                continue;\n            }\n            args.set(rawArgs[i], true);\n        }\n        return args;\n    }\n}\nexports.default = ArgsParser;\n","export default class ArgsParser {\r\n\r\n    public static parse(rawArgs: string[]) {\r\n        let args = new Map<string, any>();\r\n\r\n        for (let i = 0; i < rawArgs.length; i++) {\r\n            rawArgs[i] = rawArgs[i].startsWith(\"--\") ? rawArgs[i].substr(2) : rawArgs[i];\r\n\r\n            if ([\"mode\"].includes(rawArgs[i])) {\r\n                if (i == rawArgs.length - 1 || rawArgs[i + 1].startsWith(\"--\"))\r\n                    throw new Error(`Missing value for ${rawArgs[i]} argument`);\r\n                \r\n                args.set(rawArgs[i], rawArgs[i + 1]);\r\n                i++;\r\n                continue;\r\n            }\r\n\r\n            args.set(rawArgs[i], true);\r\n        }\r\n\r\n        return args;\r\n    }\r\n\r\n}"]}